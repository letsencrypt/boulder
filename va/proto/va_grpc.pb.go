// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: va.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VA_DoDCV_FullMethodName = "/va.VA/DoDCV"
)

// VAClient is the client API for VA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VAClient interface {
	DoDCV(ctx context.Context, in *PerformValidationRequest, opts ...grpc.CallOption) (*ValidationResult, error)
}

type vAClient struct {
	cc grpc.ClientConnInterface
}

func NewVAClient(cc grpc.ClientConnInterface) VAClient {
	return &vAClient{cc}
}

func (c *vAClient) DoDCV(ctx context.Context, in *PerformValidationRequest, opts ...grpc.CallOption) (*ValidationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationResult)
	err := c.cc.Invoke(ctx, VA_DoDCV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VAServer is the server API for VA service.
// All implementations must embed UnimplementedVAServer
// for forward compatibility.
type VAServer interface {
	DoDCV(context.Context, *PerformValidationRequest) (*ValidationResult, error)
	mustEmbedUnimplementedVAServer()
}

// UnimplementedVAServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVAServer struct{}

func (UnimplementedVAServer) DoDCV(context.Context, *PerformValidationRequest) (*ValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoDCV not implemented")
}
func (UnimplementedVAServer) mustEmbedUnimplementedVAServer() {}
func (UnimplementedVAServer) testEmbeddedByValue()            {}

// UnsafeVAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VAServer will
// result in compilation errors.
type UnsafeVAServer interface {
	mustEmbedUnimplementedVAServer()
}

func RegisterVAServer(s grpc.ServiceRegistrar, srv VAServer) {
	// If the following call pancis, it indicates UnimplementedVAServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VA_ServiceDesc, srv)
}

func _VA_DoDCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VAServer).DoDCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VA_DoDCV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VAServer).DoDCV(ctx, req.(*PerformValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VA_ServiceDesc is the grpc.ServiceDesc for VA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "va.VA",
	HandlerType: (*VAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoDCV",
			Handler:    _VA_DoDCV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "va.proto",
}

const (
	CAA_DoCAA_FullMethodName = "/va.CAA/DoCAA"
)

// CAAClient is the client API for CAA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CAAClient interface {
	DoCAA(ctx context.Context, in *IsCAAValidRequest, opts ...grpc.CallOption) (*IsCAAValidResponse, error)
}

type cAAClient struct {
	cc grpc.ClientConnInterface
}

func NewCAAClient(cc grpc.ClientConnInterface) CAAClient {
	return &cAAClient{cc}
}

func (c *cAAClient) DoCAA(ctx context.Context, in *IsCAAValidRequest, opts ...grpc.CallOption) (*IsCAAValidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsCAAValidResponse)
	err := c.cc.Invoke(ctx, CAA_DoCAA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CAAServer is the server API for CAA service.
// All implementations must embed UnimplementedCAAServer
// for forward compatibility.
type CAAServer interface {
	DoCAA(context.Context, *IsCAAValidRequest) (*IsCAAValidResponse, error)
	mustEmbedUnimplementedCAAServer()
}

// UnimplementedCAAServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCAAServer struct{}

func (UnimplementedCAAServer) DoCAA(context.Context, *IsCAAValidRequest) (*IsCAAValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCAA not implemented")
}
func (UnimplementedCAAServer) mustEmbedUnimplementedCAAServer() {}
func (UnimplementedCAAServer) testEmbeddedByValue()             {}

// UnsafeCAAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CAAServer will
// result in compilation errors.
type UnsafeCAAServer interface {
	mustEmbedUnimplementedCAAServer()
}

func RegisterCAAServer(s grpc.ServiceRegistrar, srv CAAServer) {
	// If the following call pancis, it indicates UnimplementedCAAServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CAA_ServiceDesc, srv)
}

func _CAA_DoCAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCAAValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAAServer).DoCAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CAA_DoCAA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAAServer).DoCAA(ctx, req.(*IsCAAValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CAA_ServiceDesc is the grpc.ServiceDesc for CAA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CAA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "va.CAA",
	HandlerType: (*CAAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoCAA",
			Handler:    _CAA_DoCAA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "va.proto",
}
