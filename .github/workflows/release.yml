# Build the Boulder Debian package on tag push, and attach it to a GitHub
# release.
#
# Keep in sync with try-release.yml, with the exception that try-release.yml can
# have multiple entries in its matrix but this should only have one.
name: Build release
on:
  push:
    tags:
      - '**'

jobs:
  build-artifacts:
    strategy:
      fail-fast: false
      matrix:
        include:
          - GO_VERSION: "1.25.2"
            ARCH: "amd64"
            RUNNER: "ubuntu-24.04"
          - GO_VERSION: "1.25.2"
            ARCH: "arm64"
            RUNNER: "ubuntu-24.04-arm"
    runs-on: ${{ matrix.RUNNER }}
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      go_version: ${{ matrix.GO_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: '0' # Needed for verify-release-ancestry.sh to see origin/main

      - name: Verify release ancestry
        run: ./tools/verify-release-ancestry.sh "$GITHUB_SHA"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set version output
        id: version
        run: |
          # Use commit timestamp for reproducible builds
          COMMIT_TIMESTAMP="$(git show -s --format=%ct HEAD)"
          VERSION="${{ matrix.GO_VERSION }}.${COMMIT_TIMESTAMP}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Boulder container and .deb
        id: build
        env:
          GO_VERSION: ${{ matrix.GO_VERSION }}
          DOCKER_DEFAULT_PLATFORM: linux/${{ matrix.ARCH }}
        run: ./tools/container-build.sh

      - name: Export container image for multi-platform
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          docker save "boulder:${VERSION}-${{ matrix.ARCH }}" | gzip > "boulder-image-${{ matrix.ARCH }}.tar.gz"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: boulder-${{ matrix.ARCH }}
          path: |
            boulder*.deb
            boulder*.tar.gz
            boulder-image-${{ matrix.ARCH }}.tar.gz
          retention-days: 1

  create-release:
    needs: build-artifacts
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: '0'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release files
        run: |
          # Move all .deb and .tar.gz files to current directory
          find artifacts/ -name "*.deb" -o -name "*.tar.gz" | grep -v "boulder-image-" | xargs -I {} cp {} .
          
          # Compute checksums for release files only
          sha256sum boulder*.deb boulder*.tar.gz >| boulder-${{ needs.build-artifacts.outputs.version }}.$(git rev-parse --short=8 HEAD).checksums.txt

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # https://cli.github.com/manual/gh_release_create
        run: gh release create --generate-notes "${GITHUB_REF_NAME}"
        continue-on-error: true

      - name: Upload release files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # https://cli.github.com/manual/gh_release_upload
        run: gh release upload "${GITHUB_REF_NAME}" boulder*.deb boulder*.tar.gz boulder*.checksums.txt

  push-images:
    needs: build-artifacts
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download container images
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Load and tag images
        run: |
          # Load architecture-specific images
          docker load < artifacts/boulder-amd64/boulder-image-amd64.tar.gz
          docker load < artifacts/boulder-arm64/boulder-image-arm64.tar.gz
          
          VERSION="${{ needs.build-artifacts.outputs.version }}"
          BASE_TAG="ghcr.io/${{ github.repository_owner }}/boulder:${{ github.ref_name }}-go${VERSION}"
          
          # Tag with architecture-specific tags for manifest creation
          docker tag "boulder:${VERSION}-amd64" "${BASE_TAG}-amd64"
          docker tag "boulder:${VERSION}-arm64" "${BASE_TAG}-arm64"

      - name: Login to ghcr.io
        run: printenv GITHUB_TOKEN | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push architecture-specific images
        run: |
          VERSION="${{ needs.build-artifacts.outputs.version }}"
          BASE_TAG="ghcr.io/${{ github.repository_owner }}/boulder:${{ github.ref_name }}-go${VERSION}"
          docker push "${BASE_TAG}-amd64"
          docker push "${BASE_TAG}-arm64"

      - name: Create and push multi-platform manifest
        run: |
          VERSION="${{ needs.build-artifacts.outputs.version }}"
          BASE_TAG="ghcr.io/${{ github.repository_owner }}/boulder:${{ github.ref_name }}-go${VERSION}"
          
          docker buildx imagetools create -t "${BASE_TAG}" \
            "${BASE_TAG}-amd64" \
            "${BASE_TAG}-arm64"

      - name: Build and push ct-test-srv multi-platform
        run: |
          VERSION="${{ needs.build-artifacts.outputs.version }}"
          docker buildx build . \
            --build-arg "GO_VERSION=${{ needs.build-artifacts.outputs.go_version }}" \
            -f test/ct-test-srv/Dockerfile \
            --platform linux/amd64,linux/arm64 \
            -t "ghcr.io/${{ github.repository_owner }}/ct-test-srv:${{ github.ref_name }}-go${VERSION}" \
            --push
