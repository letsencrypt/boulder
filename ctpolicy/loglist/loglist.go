package loglist

import (
	_ "embed"
	"encoding/json"
	"errors"
	"fmt"
	"math/rand"
	"sync"
	"time"

	"github.com/letsencrypt/boulder/ctpolicy/ctconfig"
	"github.com/letsencrypt/boulder/ctpolicy/loglist/generated"
)

// embedOnce allows us to create and cache a parsed, in-memory version of the
// autogenerated and embedded JSON log list blob.
type embedOnce struct {
	sync.Once
	err error
	generated.LogListSchemaJson
}

// embedded is the only instance of the `embedOnce` type. It will be populated
// by the first call to New(), and then speed up subsequent calls to New().
var embedded embedOnce

// loadEmbedded initializes the in-memory parsed version of the embedded JSON
// log list. It should only be called inside `sync.Once.Do()`.
func loadEmbedded() {
	err := json.Unmarshal(generated.LogListJSON, &embedded)
	if err != nil {
		embedded.err = err
		return
	}
}

// purpose is the use to which a log list will be put. This type exists to allow
// the following consts to be declared for use by LogList consumers.
type purpose string

// Issuance means that the new log list should only contain Usable logs, which
// can issue SCTs that will be trusted by all Chrome clients.
const Issuance purpose = "scts"

// Informational means that the new log list can contain Usable, Qualified, and
// Pending logs, which will all accept submissions but not necessarily be
// trusted by Chrome clients.
const Informational purpose = "info"

// Validation means that the new log list should only contain Usable and
// Readonly logs, whose SCTs will be trusted by all Chrome clients but aren't
// necessarily still issuing SCTs today.
const Validation purpose = "lint"

// List represents a list of logs, grouped by their operator, arranged by
// the "v3" schema as published by Chrome:
// https://www.gstatic.com/ct/log_list/v3/log_list_schema.json
// It exports no fields so that consumers don't have to deal with the terrible
// autogenerated names of the structs it wraps.
type List map[string]OperatorGroup

// OperatorGroup represents a group of logs which are all run by the same
// operator organization. It provies  constant-time lookup of logs within the
// group by their unique ID.
type OperatorGroup map[string]Log

// Log represents a single log run by an operator. It contains just the info
// necessary to contact a log, and to determine whether that log will accept
// the submission of a certificate with a given expiration.
type Log struct {
	Url            string
	Key            string
	startInclusive time.Time
	endExclusive   time.Time
}

// contains is a simple helper to see if a log with the given ID is in the
// input slice, since we don't have generic stdlib functions for this yet.
func contains(haystack []ctconfig.LogID, needle string) bool {
	for _, item := range haystack {
		if item.ID == needle {
			return true
		}
	}
	return false
}

// stateForPurpose returns true if the log state is acceptable for the given
// log list purpose, and false otherwise.
func stateForPurpose(s *generated.LogListSchemaJsonOperatorsElemLogsElemState, p purpose) bool {
	switch p {
	case Issuance:
		return s.Usable != nil
	case Informational:
		return s.Usable != nil || s.Qualified != nil || s.Pending != nil
	case Validation:
		return s.Usable != nil || s.Readonly != nil
	}
	return false
}

// New returns a LogList which is a subset of the autogenerated and embedded
// JSON blob, containing only those logs whose LogIDs match the given list of
// IDs. If no log IDs are provided, all logs are presumed to match. The value
// passed as the purpose controls which log states (e.g. Qualified vs Readonly)
// are considered acceptable and will be included in the resulting list.
func New(ids []ctconfig.LogID, p purpose) (List, error) {
	embedded.Do(loadEmbedded)
	if embedded.err != nil {
		return nil, fmt.Errorf("failed to parse CT Log List: %w", embedded.err)
	}

	result, err := newHelper(&embedded, ids, p)
	if err != nil {
		return nil, err
	}

	if len(result) < 2 && p != Informational {
		return nil, errors.New("log list does not have enough groups to satisfy Chrome policy")
	}

	return result, nil
}

// newHelper exists solely so that the unit tests can test the core logic of
// New() without having to mess with the global `embedded` JSON log list.
func newHelper(base *embedOnce, ids []ctconfig.LogID, p purpose) (List, error) {
	result := make(List)
	for _, op := range base.Operators {
		group := make(OperatorGroup)
		for _, log := range op.Logs {
			if log.State == nil || !stateForPurpose(log.State, p) {
				continue
			}

			if len(ids) > 0 && !contains(ids, log.LogId) {
				continue
			}

			info := Log{
				Url: log.Url,
				Key: log.Key,
			}

			if log.TemporalInterval != nil {
				startInclusive, err := time.Parse(time.RFC3339, log.TemporalInterval.StartInclusive)
				if err != nil {
					return nil, fmt.Errorf("failed to parse log %q start timestamp: %w", log.Url, err)
				}

				endExclusive, err := time.Parse(time.RFC3339, log.TemporalInterval.EndExclusive)
				if err != nil {
					return nil, fmt.Errorf("failed to parse log %q end timestamp: %w", log.Url, err)
				}

				info.startInclusive = startInclusive
				info.endExclusive = endExclusive
			}

			group[log.LogId] = info
		}
		if len(group) > 0 {
			result[op.Name] = group
		}
	}
	return result, nil
}

// OperatorForLogID returns the Name of the Group containing the Log with the
// given ID, or an error if no such log/group can be found.
func (ll List) OperatorForLogID(logID string) (string, error) {
	for op, group := range ll {
		_, ok := group[logID]
		if ok {
			return op, nil
		}
	}
	return "", fmt.Errorf("no log with ID %q found", logID)
}

// Permute returns the list of operator group names in a randomized order.
func (ll List) Permute() []string {
	keys := make([]string, 0, len(ll))
	for k := range ll {
		keys = append(keys, k)
	}

	result := make([]string, len(ll))
	for i, j := range rand.Perm(len(ll)) {
		result[i] = keys[j]
	}

	return result
}

// PickOne returns the URI and Public Key of a single randomly-selected log
// which is run by the given operator and whose temporal interval includes the
// given expiry time. It returns an error if no such log can be found.
func (ll List) PickOne(operator string, expiry time.Time) (string, string, error) {
	group, ok := ll[operator]
	if !ok {
		return "", "", fmt.Errorf("no log operator group named %q", operator)
	}

	candidates := make([]Log, 0)
	for _, log := range group {
		if log.startInclusive.IsZero() || log.endExclusive.IsZero() {
			candidates = append(candidates, log)
			continue
		}

		if (log.startInclusive.Equal(expiry) || log.startInclusive.Before(expiry)) && log.endExclusive.After(expiry) {
			candidates = append(candidates, log)
		}
	}

	if len(candidates) < 1 {
		return "", "", fmt.Errorf("no log found for group %q and expiry %s", operator, expiry)
	}

	log := candidates[rand.Intn(len(candidates))]
	return log.Url, log.Key, nil
}
