package sa

import (
	"fmt"
	"regexp"
)

var checkStringQuoteRE = regexp.MustCompile(`^'[0-9A-Za-z_\-=:]+'$`)
var checkIntRE = regexp.MustCompile(`^\d+$`)
var checkImproperIntRE = regexp.MustCompile(`^'\d+'$`)
var checkFloatOrIntRE = regexp.MustCompile(`^\d+(\.\d+)?$`)
var checkImproperFloatOrIntRE = regexp.MustCompile(`^'\d+(\.\d+)?'$`)
var checkBooleanRE = regexp.MustCompile(`^([0-1])|(?i)(true|false)|(?i)(on|off)`)

// checkMariaDBSystemVariables validates a MariaDB config passed in via SA
// setDefault or DSN. This manually curated list of system variables was
// partially generated by a tool in issue #6687. An overview of the validations
// performed are:
//
//   - Variables are scoped as "SESSION" rather than "GLOBAL" have been defined.
//     This has an added benefit that we can prevent instantiating a new SA if an
//     improper set of database variables is provided.
//
//   - Correct quoting for strings, string enums, integer enums to prevent future
//     problems such as PR #6683 from occurring.
//
//   - Regex validation is performed for the various booleans, floats, integers, and strings.
func checkMariaDBSystemVariables(name string, value string) error {
	// System variable names will be indexed into the appropriate hash sets
	// below and can possibly exist in several.

	// Check MariaDB system variables can be scoped per session. A session
	// variable change affects the current session only. Passing a session
	// variable that only exists in the global scope causes database connection
	// error 1045.
	// https://mariadb.com/kb/en/set/#global-session
	mariaDBSessionScope := map[string]struct{}{
		"autocommit":                           {},
		"bulk_insert_buffer_size":              {},
		"character_set_client":                 {},
		"character_set_connection":             {},
		"character_set_database":               {},
		"character_set_filesystem":             {},
		"character_set_results":                {},
		"character_set_server":                 {},
		"check_constraint_checks":              {},
		"collation_connection":                 {},
		"collation_database":                   {},
		"collation_server":                     {},
		"completion_type":                      {},
		"debug_sync":                           {},
		"default_storage_engine":               {},
		"default_tmp_storage_engine":           {},
		"default_week_format":                  {},
		"enforce_storage_engine":               {},
		"eq_range_index_dive_limit":            {},
		"error_count":                          {},
		"expensive_subquery_limit":             {},
		"external_user":                        {},
		"foreign_key_checks":                   {},
		"group_concat_max_len":                 {},
		"histogram_size":                       {},
		"idle_readonly_transaction_timeout":    {},
		"idle_transaction_timeout":             {},
		"idle_write_transaction_timeout":       {},
		"in_predicate_conversion_threshold":    {},
		"insert_id":                            {},
		"interactive_timeout":                  {},
		"in_transaction":                       {},
		"join_buffer_size":                     {},
		"join_buffer_space_limit":              {},
		"keep_files_on_create":                 {},
		"last_insert_id":                       {},
		"lc_time_names":                        {},
		"lock_wait_timeout":                    {},
		"log_slow_min_examined_row_limit":      {},
		"log_slow_query":                       {},
		"log_slow_query_time":                  {},
		"log_slow_rate_limit":                  {},
		"long_query_time":                      {},
		"low_priority_updates":                 {},
		"max_allowed_packet":                   {},
		"max_delayed_threads":                  {},
		"max_digest_length":                    {},
		"max_error_count":                      {},
		"max_heap_table_size":                  {},
		"max_join_size":                        {},
		"max_length_for_sort_data":             {},
		"max_recursive_iterations":             {},
		"max_rowid_filter_size":                {},
		"max_seeks_for_key":                    {},
		"max_session_mem_used":                 {},
		"max_sort_length":                      {},
		"max_sp_recursion_depth":               {},
		"max_statement_time":                   {},
		"max_user_connections":                 {},
		"min_examined_row_limit":               {},
		"mrr_buffer_size":                      {},
		"net_buffer_length":                    {},
		"net_read_timeout":                     {},
		"net_retry_count":                      {},
		"net_write_timeout":                    {},
		"old":                                  {},
		"old_mode":                             {},
		"old_passwords":                        {},
		"optimizer_extra_pruning_depth":        {},
		"optimizer_max_sel_arg_weight":         {},
		"optimizer_prune_level":                {},
		"optimizer_search_depth":               {},
		"optimizer_selectivity_sampling_limit": {},
		"optimizer_switch":                     {},
		"optimizer_trace":                      {},
		"optimizer_trace_max_mem_size":         {},
		"preload_buffer_size":                  {},
		"profiling":                            {},
		"profiling_history_size":               {},
		"progress_report_time":                 {},
		"proxy_user":                           {},
		"pseudo_slave_mode":                    {},
		"pseudo_thread_id":                     {},
		"query_alloc_block_size":               {},
		"query_cache_strip_comments":           {},
		"query_cache_wlock_invalidate":         {},
		"query_prealloc_size":                  {},
		"rand_seed1":                           {},
		"range_alloc_block_size":               {},
		"read_rnd_buffer_size":                 {},
		"rowid_merge_buff_size":                {},
		"session_track_schema":                 {},
		"session_track_state_change":           {},
		"session_track_system_variables":       {},
		"session_track_transaction_info":       {},
		"slow_query_log":                       {},
		"sql_auto_is_null":                     {},
		"sql_big_selects":                      {},
		"sql_buffer_result":                    {},
		"sql_if_exists":                        {},
		"sql_log_off":                          {},
		"sql_mode":                             {},
		"sql_notes":                            {},
		"sql_quote_show_create":                {},
		"sql_safe_updates":                     {},
		"sql_select_limit":                     {},
		"sql_warnings":                         {},
		"standard_compliant_cte":               {},
		"tcp_nodelay":                          {},
		"time_zone":                            {},
		"tmp_disk_table_size":                  {},
		"transaction_alloc_block_size":         {},
		"transaction_prealloc_size":            {},
		"tx_isolation":                         {},
		"tx_read_only":                         {},
		"unique_checks":                        {},
		"updatable_views_with_limit":           {},
		"wait_timeout":                         {},
		"warning_count":                        {},
	}

	if _, found := mariaDBSessionScope[name]; !found {
		return fmt.Errorf("%v=%v is either unable to be used in the SESSION scope or was not found in the curated list of MariaDB system variables", name, value)
	}

	// Check the list of currently known MariaDB string type system variables
	// and determine if the value is a properly formatted string e.g.
	// sql_mode='STRICT_TABLES'
	mariaDBStringTypes := map[string]struct{}{
		"character_set_client":           {},
		"character_set_connection":       {},
		"character_set_database":         {},
		"character_set_filesystem":       {},
		"character_set_results":          {},
		"character_set_server":           {},
		"collation_connection":           {},
		"collation_database":             {},
		"collation_server":               {},
		"debug_sync":                     {},
		"enforce_storage_engine":         {},
		"external_user":                  {},
		"lc_time_names":                  {},
		"old_mode":                       {},
		"optimizer_switch":               {},
		"proxy_user":                     {},
		"session_track_system_variables": {},
		"sql_mode":                       {},
		"time_zone":                      {},
	}

	if _, found := mariaDBStringTypes[name]; found {
		if checkStringQuoteRE.FindString(value) != value {
			return fmt.Errorf("%v=%v string is not properly quoted", name, value)
		}
		return nil
	}

	// MariaDB numerics which may either be integers or floats.
	// https://mariadb.com/kb/en/numeric-data-type-overview/
	mariaDBNumericTypes := map[string]struct{}{
		"bulk_insert_buffer_size":              {},
		"default_week_format":                  {},
		"eq_range_index_dive_limit":            {},
		"error_count":                          {},
		"expensive_subquery_limit":             {},
		"group_concat_max_len":                 {},
		"histogram_size":                       {},
		"idle_readonly_transaction_timeout":    {},
		"idle_transaction_timeout":             {},
		"idle_write_transaction_timeout":       {},
		"in_predicate_conversion_threshold":    {},
		"insert_id":                            {},
		"interactive_timeout":                  {},
		"join_buffer_size":                     {},
		"join_buffer_space_limit":              {},
		"last_insert_id":                       {},
		"lock_wait_timeout":                    {},
		"log_slow_min_examined_row_limit":      {},
		"log_slow_query_time":                  {},
		"log_slow_rate_limit":                  {},
		"long_query_time":                      {},
		"max_allowed_packet":                   {},
		"max_delayed_threads":                  {},
		"max_digest_length":                    {},
		"max_error_count":                      {},
		"max_heap_table_size":                  {},
		"max_join_size":                        {},
		"max_length_for_sort_data":             {},
		"max_recursive_iterations":             {},
		"max_rowid_filter_size":                {},
		"max_seeks_for_key":                    {},
		"max_session_mem_used":                 {},
		"max_sort_length":                      {},
		"max_sp_recursion_depth":               {},
		"max_statement_time":                   {},
		"max_user_connections":                 {},
		"min_examined_row_limit":               {},
		"mrr_buffer_size":                      {},
		"net_buffer_length":                    {},
		"net_read_timeout":                     {},
		"net_retry_count":                      {},
		"net_write_timeout":                    {},
		"optimizer_extra_pruning_depth":        {},
		"optimizer_max_sel_arg_weight":         {},
		"optimizer_prune_level":                {},
		"optimizer_search_depth":               {},
		"optimizer_selectivity_sampling_limit": {},
		"optimizer_trace_max_mem_size":         {},
		"preload_buffer_size":                  {},
		"profiling_history_size":               {},
		"progress_report_time":                 {},
		"pseudo_slave_mode":                    {},
		"pseudo_thread_id":                     {},
		"query_alloc_block_size":               {},
		"query_prealloc_size":                  {},
		"rand_seed1":                           {},
		"range_alloc_block_size":               {},
		"read_rnd_buffer_size":                 {},
		"rowid_merge_buff_size":                {},
		"sql_select_limit":                     {},
		"tmp_disk_table_size":                  {},
		"transaction_alloc_block_size":         {},
		"transaction_prealloc_size":            {},
		"wait_timeout":                         {},
		"warning_count":                        {},
	}

	if _, found := mariaDBNumericTypes[name]; found {
		if checkFloatOrIntRE.FindString(value) == value {
			return nil
		}
		if checkImproperFloatOrIntRE.FindString(value) == value {
			return fmt.Errorf("%v=%v numeric is quoted, but should not be", name, value)
		}
	}

	// Certain MariaDB enums can have both string and integer values.
	mariaDBIntEnumTypes := map[string]struct{}{
		"completion_type": {},
	}

	mariaDBStringEnumTypes := map[string]struct{}{
		"completion_type":                {},
		"default_storage_engine":         {},
		"default_tmp_storage_engine":     {},
		"optimizer_trace":                {},
		"session_track_transaction_info": {},
		"tx_isolation":                   {},
	}

	// Check the list of currently known MariaDB enumeration type system
	// variables and determine if the value is either:
	// 1) A properly formatted integer e.g. completion_type=1
	if _, found := mariaDBIntEnumTypes[name]; found {
		if checkIntRE.FindString(value) == value {
			return nil
		}
		if checkImproperIntRE.FindString(value) == value {
			return fmt.Errorf("%v=%v integer enum is quoted, but should not be", name, value)
		}
	}

	// 2) A properly formatted string e.g. completion_type='CHAIN'
	if _, found := mariaDBStringEnumTypes[name]; found {
		if checkStringQuoteRE.FindString(value) != value {
			return fmt.Errorf("%v=%v string enum is not properly quoted", name, value)
		}
		return nil
	}

	// MariaDB booleans can be (0, false) or (1, true).
	// https://mariadb.com/kb/en/boolean/
	mariaDBBooleanTypes := map[string]struct{}{
		"autocommit":                   {},
		"check_constraint_checks":      {},
		"foreign_key_checks":           {},
		"in_transaction":               {},
		"keep_files_on_create":         {},
		"log_slow_query":               {},
		"low_priority_updates":         {},
		"old":                          {},
		"old_passwords":                {},
		"profiling":                    {},
		"query_cache_strip_comments":   {},
		"query_cache_wlock_invalidate": {},
		"session_track_schema":         {},
		"session_track_state_change":   {},
		"slow_query_log":               {},
		"sql_auto_is_null":             {},
		"sql_big_selects":              {},
		"sql_buffer_result":            {},
		"sql_if_exists":                {},
		"sql_log_off":                  {},
		"sql_notes":                    {},
		"sql_quote_show_create":        {},
		"sql_safe_updates":             {},
		"sql_warnings":                 {},
		"standard_compliant_cte":       {},
		"tcp_nodelay":                  {},
		"tx_read_only":                 {},
		"unique_checks":                {},
		"updatable_views_with_limit":   {},
	}

	if _, found := mariaDBBooleanTypes[name]; found {
		if checkBooleanRE.FindString(value) != value {
			return fmt.Errorf("%v=%v expected boolean value", name, value)
		}
		return nil
	}

	return fmt.Errorf("%v=%v was unexpected", name, value)
}
