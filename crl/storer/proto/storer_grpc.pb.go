// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: storer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CRLStorer_UploadCRL_FullMethodName = "/storer.CRLStorer/UploadCRL"
)

// CRLStorerClient is the client API for CRLStorer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRLStorerClient interface {
	UploadCRL(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadCRLRequest, emptypb.Empty], error)
}

type cRLStorerClient struct {
	cc grpc.ClientConnInterface
}

func NewCRLStorerClient(cc grpc.ClientConnInterface) CRLStorerClient {
	return &cRLStorerClient{cc}
}

func (c *cRLStorerClient) UploadCRL(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadCRLRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CRLStorer_ServiceDesc.Streams[0], CRLStorer_UploadCRL_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadCRLRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CRLStorer_UploadCRLClient = grpc.ClientStreamingClient[UploadCRLRequest, emptypb.Empty]

// CRLStorerServer is the server API for CRLStorer service.
// All implementations must embed UnimplementedCRLStorerServer
// for forward compatibility
type CRLStorerServer interface {
	UploadCRL(grpc.ClientStreamingServer[UploadCRLRequest, emptypb.Empty]) error
	mustEmbedUnimplementedCRLStorerServer()
}

// UnimplementedCRLStorerServer must be embedded to have forward compatible implementations.
type UnimplementedCRLStorerServer struct {
}

func (UnimplementedCRLStorerServer) UploadCRL(grpc.ClientStreamingServer[UploadCRLRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method UploadCRL not implemented")
}
func (UnimplementedCRLStorerServer) mustEmbedUnimplementedCRLStorerServer() {}

// UnsafeCRLStorerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRLStorerServer will
// result in compilation errors.
type UnsafeCRLStorerServer interface {
	mustEmbedUnimplementedCRLStorerServer()
}

func RegisterCRLStorerServer(s grpc.ServiceRegistrar, srv CRLStorerServer) {
	s.RegisterService(&CRLStorer_ServiceDesc, srv)
}

func _CRLStorer_UploadCRL_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CRLStorerServer).UploadCRL(&grpc.GenericServerStream[UploadCRLRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CRLStorer_UploadCRLServer = grpc.ClientStreamingServer[UploadCRLRequest, emptypb.Empty]

// CRLStorer_ServiceDesc is the grpc.ServiceDesc for CRLStorer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRLStorer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storer.CRLStorer",
	HandlerType: (*CRLStorerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadCRL",
			Handler:       _CRLStorer_UploadCRL_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "storer.proto",
}
